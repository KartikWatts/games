"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configs = exports.rules = void 0;
var rules_1 = require("./rules");
Object.defineProperty(exports, "rules", { enumerable: true, get: function () { return rules_1.rules; } });
var restrictedSyntaxBase = [
    {
        selector: "TryStatement",
        message: "Try/catch might prevent Rune from working properly.",
    },
    {
        selector: "ThisExpression,WithStatement",
        message: "This references might prevent Rune from working properly.",
    },
    {
        selector: "AwaitExpression,ArrowFunctionExpression[async=true],FunctionExpression[async=true],FunctionDeclaration[async=true],YieldExpression",
        message: "Rune logic must be synchronous.",
    },
    {
        selector: "RegExpLiteral",
        message: "Regular expressions are stateful and might prevent Rune from working properly.",
    },
];
var restrictedGlobals = [
    "exports",
    "module",
    "require",
    "window",
    "global",
    "constructor",
    {
        name: "Date",
        message: "Please use Rune.gameTimeInSeconds() for time",
    },
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "eval",
    "EvalError",
    "Function",
    "RegExp",
    "toLocaleString",
    "unescape",
    "ArrayBuffer",
    "DataView",
    "Float32Array",
    "Float64Array",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Promise",
    "Proxy",
    "Reflect",
    "Symbol",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "WeakMap",
    "WeakSet",
    "Atomics",
    "SharedArrayBuffer",
    "BigInt",
    "BigInt64Array",
    "BigUint64Array",
    "FinalizationRegistry",
    "WeakRef",
    "Performance",
    "Intl",
];
var logicConfig = {
    // https://github.com/eslint/eslint/issues/7984#issuecomment-275409556
    env: { es6: true },
    plugins: ["rune"],
    parserOptions: {
        ecmaVersion: 2021,
    },
    globals: {
        globalThis: "readonly",
        global: "readonly",
        Rune: "readonly",
        console: "readonly",
    },
    rules: {
        "no-restricted-globals": __spreadArray(["error"], restrictedGlobals, true),
        "no-undef": 2,
        "no-global-assign": 2,
        "no-extend-native": 2,
        "no-var": 1,
        "no-restricted-properties": [
            2,
            {
                object: "Rune",
                property: "init",
                message: "Rune.init() is restricted to client-only code.",
            },
            {
                object: "Rune",
                property: "initClient",
                message: "Rune.init() is restricted to client-only code.",
            },
            {
                object: "Rune",
                property: "deterministicRandom",
                message: "Rune.init() is restricted to client-only code.",
            },
        ],
        "no-restricted-syntax": __spreadArray([
            "error",
            {
                selector: "ImportDeclaration,ExportNamedDeclaration[source],ExportAllDeclaration[source],ExportDefaultDeclaration[source]",
                message: "Rune logic must be contained in a single file.",
            }
        ], restrictedSyntaxBase, true),
        "rune/no-parent-scope-mutation": 2,
    },
};
var logicModuleConfig = __assign(__assign({}, logicConfig), { rules: __assign(__assign({}, logicConfig.rules), { "no-restricted-syntax": __spreadArray(["error"], restrictedSyntaxBase, true) }) });
exports.configs = {
    recommended: {
        globals: {
            Rune: "readonly",
        },
        overrides: [
            __assign({ files: ["**/logic.ts", "**/logic.js"] }, logicModuleConfig),
        ],
    },
    logic: logicConfig,
    logicModule: logicModuleConfig,
};
